using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Win10AMSI
{
    class Program
    {
        static void Main(string[] args)
        {
            IntPtr amsiContext;
            IntPtr session;
            AMSI_RESULT result = 0;
            int returnValue;
            
            returnValue = NativeMethods.AmsiInitialize("Win10AMSIScanner", out amsiContext);
            returnValue = NativeMethods.AmsiOpenSession(amsiContext, out session);

            Scan(amsiContext, session, ref result);

            Console.WriteLine(result);

            NativeMethods.AmsiCloseSession(amsiContext, session);
            NativeMethods.AmsiUninitialize(amsiContext);

            Console.ReadLine();
        }

        private static void Scan(IntPtr amsiContext, IntPtr session, ref AMSI_RESULT result)
        {
            const int bufferLength = 10;
            using (var fs = new MemoryStream(Encoding.UTF8.GetBytes(@"X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*")))
            {
                long alreadyRead = 0;
                fs.Seek(0, SeekOrigin.Begin);

                long toReadCount = alreadyRead + bufferLength <= fs.Length ? bufferLength : fs.Length - alreadyRead;
                while (toReadCount > 0)
                {
                    var content = new byte[toReadCount];
                    fs.Read(content, 0, (int)toReadCount);

                    NativeMethods.AmsiScanBuffer(amsiContext, content, (uint)toReadCount, "eicar-test-file", session, out result);

                    alreadyRead += toReadCount;
                    toReadCount = alreadyRead + bufferLength <= fs.Length ? bufferLength : fs.Length - alreadyRead;
                }
            }
        }
    }
}
